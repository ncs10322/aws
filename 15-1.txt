Parameters:
  KeyName:
    Description: EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: EC2 KeyPair
  LatestAmiId:
    Description: EC2 AMI 
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    AllowedValues:
      - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  MyVPC18:
    Type: AWS::EC2::VPC
    Properties:
     CidrBlock: 10.18.0.0/16
     EnableDnsSupport: true
     EnableDnsHostnames: true
     Tags:
      - Key: Name
        Value: MyVPC18

  MyVPC19:
    Type: AWS::EC2::VPC
    Properties:
     CidrBlock: 10.19.0.0/16
     EnableDnsSupport: true
     EnableDnsHostnames: true
     Tags:
      - Key: Name
        Value: MyVPC19

  MyVPC20:
    Type: AWS::EC2::VPC
    Properties:
     CidrBlock: 10.20.0.0/16
     EnableDnsSupport: true
     EnableDnsHostnames: true
     Tags:
      - Key: Name
        Value: MyVPC20

  MyIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyIGW

  MyIGWattachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyIGW
      VpcId: !Ref MyVPC18

  MyVPC18RT1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC18
      Tags:
        - Key: Name
          Value: MyVPC18RT1

  MyPublicDefault18:
    Type: AWS::EC2::Route
    DependsOn: MyIGWattachment
    Properties:
      RouteTableId: !Ref MyVPC18RT1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIGW

  MyVPC18RT2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC18
      Tags:
        - Key: Name
          Value: MyVPC18RT2

  MyVPC19RT1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC19
      Tags:
        - Key: Name
          Value: MyVPC19RT1

  MyVPC19RT2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC19
      Tags:
        - Key: Name
          Value: MyVPC19RT2

  MyVPC20RT1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC20
      Tags:
        - Key: Name
          Value: MyVPC20RT1

  MyVPC20RT2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC20
      Tags:
        - Key: Name
          Value: MyVPC20RT2

  MyPublicSubnet18:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC18
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.18.1.0/24
      Tags:
        - Key: Name
          Value: MyPublicSubnet18

  MyPublicSubnet1811:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC18
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.18.11.0/24
      Tags:
        - Key: Name
          Value: MyPublicSubnet1811

  MyPrivateSubnet19:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC19
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.19.1.0/24
      Tags:
        - Key: Name
          Value: MyPrivateSubnet19

  MyPrivateSubnet1911:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC19
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.19.11.0/24
      Tags:
        - Key: Name
          Value: MyPrivateSubnet1911

  MyPrivateSubnet20:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC20
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.20.1.0/24
      Tags:
        - Key: Name
          Value: MyPrivateSubnet20

  MyPrivateSubnet2011:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC20
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.20.11.0/24
      Tags:
        - Key: Name
          Value: MyPrivateSubnet2011

  MyPublicSubnet18RoutingAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyVPC18RT1
      SubnetId: !Ref MyPublicSubnet18

  MyPublicSubnet1811RoutingAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyVPC18RT2
      SubnetId: !Ref MyPublicSubnet1811

  MyPrivateSubnet19RoutingAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyVPC19RT1
      SubnetId: !Ref MyPrivateSubnet19

  MyPrivateSubnet1911RoutingAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyVPC19RT2
      SubnetId: !Ref MyPrivateSubnet1911

  MyPrivateSubnet20RoutingAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyVPC20RT1
      SubnetId: !Ref MyPrivateSubnet20

  MyPrivateSubnet2011RoutingAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyVPC20RT2
      SubnetId: !Ref MyPrivateSubnet2011

  MyVPC18Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref MyPublicSecugroup18
      ServiceName: !Sub com.amazonaws.${AWS::Region}.cloudformation
      SubnetIds:
        - !Ref MyPublicSubnet18
      VpcId: !Ref MyVPC18
      VpcEndpointType: Interface

  MyWeb18:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t3.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: MyWeb18
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref MyPublicSubnet18
          GroupSet:
          - !Ref MyPublicSecugroup18
          AssociatePublicIpAddress: true
          PrivateIpAddress: 10.18.1.101
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostnamectl --static set-hostname MyWeb18
            echo "toor1234." | passwd --stdin root
            sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
            sed -i 's/^#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config
            service sshd restart
            yum install -y tcpdump squid
            cat << EOF > /etc/squid/squid.conf
            http_port 3128
            acl all src 0.0.0.0/0
            http_access allow all
            http_access deny all
            EOF
            systemctl enable --now squid
            cat << EOF > /home/ec2-user/EC2_list.txt
            10.18.1.101
            10.19.1.101
            10.20.1.101
            EOF
            yum -y install httpd
            systemctl enable --now httpd
            echo "<h1>MyWeb18 test page</h1>" > /var/www/html/index.html
            curl -o /home/ec2-user/ping.sh https://raw.githubusercontent.com/ncs10322/aws/main/15_ping.sh --silent
            cp /home/ec2-user/ping.sh /var/www/html/ping.sh
            cp /home/ec2-user/EC2_list.txt /var/www/html/EC2_list.txt
            chmod +x /home/ec2-user/ping.sh

  MyWeb19:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t3.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: MyWeb19
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref MyPrivateSubnet19
          GroupSet:
          - !Ref MyPrivateSecugroup19
          PrivateIpAddress: 10.19.1.101
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostnamectl --static set-hostname MyWeb19
            echo "toor1234." | passwd --stdin root
            sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
            sed -i 's/^#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config
            service sshd restart
            cat << EOF >> /etc/bashrc
            export http_proxy=http://10.18.1.101:3128
            export https_proxy=http://10.18.1.101:3128
            no_proxy=127.0.0.1,localhost,169.254.169.254,10.0.0.0/8,.internal
            EOF

  MyWeb20:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t3.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: MyWeb20
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref MyPrivateSubnet20
          GroupSet:
          - !Ref MyPrivateSecugroup20
          PrivateIpAddress: 10.20.1.101
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostnamectl --static set-hostname MyWeb20
            echo "toor1234." | passwd --stdin root
            sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
            sed -i 's/^#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config
            service sshd restart
            cat << EOF >> /etc/bashrc
            export http_proxy=http://10.18.1.101:3128
            export https_proxy=http://10.18.1.101:3128
            no_proxy=127.0.0.1,localhost,169.254.169.254,10.0.0.0/8,.internal
            EOF

  MyPublicSecugroup18:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MyVPC18
      GroupDescription: Permit HTTP(80), SSH(22), HTTPS(443), squid(3128) and ICMP
      Tags:
      - Key : Name
        Value : MyPublicSecugroup18
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '3128'
        ToPort: '3128'
        CidrIp: 10.0.0.0/8
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0

  MyPrivateSecugroup19:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MyVPC19
      GroupDescription: Permit SSH(22) and ICMP
      Tags:
      - Key : Name
        Value : MyPrivateSecugroup19
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0

  MyPrivateSecugroup20:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MyVPC20
      GroupDescription: Permit SSH(22) and ICMP
      Tags:
      - Key : Name
        Value : MyPrivateSecugroup20
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
