Parameters:
  KeyName:
    Description: EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: EC2 KeyPair
  LatestAmiId:
    Description: EC2 AMI 
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    AllowedValues:
      - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  MyVPC16:
    Type: AWS::EC2::VPC
    Properties:
     CidrBlock: 10.0.0.0/16
     EnableDnsSupport: true
     EnableDnsHostnames: true
     Tags:
      - Key: Name
        Value: MyVPC16

  MyVPC17:
    Type: AWS::EC2::VPC
    Properties:
     CidrBlock: 20.0.0.0/16
     EnableDnsSupport: true
     EnableDnsHostnames: true
     Tags:
      - Key: Name
        Value: MyVPC17

  MyIGW1:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyIGW1

  MyIGW2:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyIGW2

  MyIGW1attachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyIGW1
      VpcId: !Ref MyVPC16

  MyIGW2attachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyIGW2
      VpcId: !Ref MyVPC17

  MyPublicRouting1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC16
      Tags:
        - Key: Name
          Value: MyPublicRouting1

  MyPublicDefault1:
    Type: AWS::EC2::Route
    DependsOn: MyIGW1attachment
    Properties:
      RouteTableId: !Ref MyPublicRouting1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIGW1

  MyPrivateRouting1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC16
      Tags:
        - Key: Name
          Value: MyPrivateRouting1

  MyPublicRouting2:
    Type: AWS::EC2::RouteTable
    Properties:
        VpcId: !Ref MyVPC17
        Tags:
          - Key: Name
            Value: MyPublicRouting2

  MyPublicDefault2:
    Type: AWS::EC2::Route
    DependsOn: MyIGW2attachment
    Properties:
      RouteTableId: !Ref MyPublicRouting2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIGW2

  MyPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC16
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: MyPublicSubnet1

  MyPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC16
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.11.0/24
      Tags:
        - Key: Name
          Value: MyPrivateSubnet1

  MyPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
        VpcId: !Ref MyVPC17
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: 20.0.0.0/24
        Tags:
          - Key: Name
            Value: MyPublicSubnet2

  MyPublicSubnet1RoutingAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPublicRouting1
      SubnetId: !Ref MyPublicSubnet1

  MyPrivateSubnet1RoutingAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPrivateRouting1
      SubnetId: !Ref MyPrivateSubnet1

  MyPublicSubnet2RoutingAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
        RouteTableId: !Ref MyPublicRouting2
        SubnetId: !Ref MyPublicSubnet2

  MyCGW:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t3.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: MyCGW
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref MyPublicSubnet1
          GroupSet:
          - !Ref MyPublicSecugroup1
          AssociatePublicIpAddress: true
          PrivateIpAddress: 10.0.1.101
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostnamectl --static set-hostname MyCGW
            yum -y install tcpdump openswan
            cat <<EOF>> /etc/sysctl.conf
            net.ipv4.ip_forward=1
            net.ipv4.conf.all.accept_redirects = 0
            net.ipv4.conf.all.send_redirects = 0
            net.ipv4.conf.default.send_redirects = 0
            net.ipv4.conf.eth0.send_redirects = 0
            net.ipv4.conf.default.accept_redirects = 0
            net.ipv4.conf.eth0.accept_redirects = 0
            net.ipv4.conf.ip_vti0.rp_filter = 0
            net.ipv4.conf.eth0.rp_filter = 0
            net.ipv4.conf.default.rp_filter = 0
            net.ipv4.conf.all.rp_filter = 0
            EOF
            sysctl -p /etc/sysctl.conf
            curl -o /etc/ipsec.d/vpnconfig.sh https://raw.githubusercontent.com/ncs10322/aws/main/14_vpnconfig.sh
            chmod +x /etc/ipsec.d/vpnconfig.sh

  MyWeb11:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t3.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: MyWeb11
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref MyPrivateSubnet1
          GroupSet:
          - !Ref MyPrivateSecugroup1
          PrivateIpAddress: 10.0.11.101
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostnamectl --static set-hostname MyWeb11
            echo "toor1234." | passwd --stdin root
            sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
            sed -i 's/^#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config
            service sshd restart

  MyWeb2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t3.micro
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: MyWeb2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref MyPublicSubnet2
          GroupSet:
          - !Ref MyPublicSecugroup2
          AssociatePublicIpAddress: true
          PrivateIpAddress: 20.0.0.101
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostnamectl --static set-hostname MyWeb2
            echo "toor1234." | passwd --stdin root
            sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
            sed -i 's/^#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config
            service sshd restart
            yum -y install httpd
            echo "<h1>MyWeb2 test page</h1>" > /var/www/html/index.html
            systemctl enable --now httpd

  MyPublicSecugroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MyVPC16
      GroupDescription: Permit HTTP(80), SSH(22), IPSec-NAT(4500), IKE(500) and ICMP
      Tags:
      - Key : Name
        Value : MyPublicSecugroup1
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '4500'
        ToPort: '4500'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '500'
        ToPort: '500'
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0

  MyPrivateSecugroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MyVPC16
      GroupDescription: Permit HTTP(80), SSH(22) and ICMP
      Tags:
      - Key : Name
        Value : MyPrivateSecugroup1
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0

  MyPublicSecugroup2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref MyVPC17
      GroupDescription: Permit HTTP(80), SSH(22), IPSec-NAT(4500), IKE(500) and ICMP
      Tags:
      - Key : Name
        Value : MyPublicSecugroup2
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '4500'
        ToPort: '4500'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '500'
        ToPort: '500'
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0