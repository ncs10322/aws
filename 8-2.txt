provider "aws" {
  region = "ap-northeast-2"
}

resource "aws_key_pair" "tf_keypair" {
  key_name = "tf_keypair"
  public_key = file("/sshkey/tf_keypair.pub")
  tags = {
    description = "TF-KeyPair"
  }
}

resource "aws_vpc" "MyVPC04" {
  cidr_block       = "10.0.0.0/16"
  enable_dns_hostnames = true
  enable_dns_support = true
  tags = {
    Name = "MyVPC04"
  }
}

resource "aws_internet_gateway" "MyIGW" {
  vpc_id = aws_vpc.MyVPC04.id
  tags = {
    Name = "MyIGW"
  }
}

resource "aws_subnet" "MyPublicSubnet" {
  vpc_id     = aws_vpc.MyVPC04.id
  cidr_block = "10.0.0.0/24"
  map_public_ip_on_launch = true
  availability_zone = "ap-northeast-2a"
  tags = {
    Name = "MyPublicSubnet"
  }
}

resource "aws_route_table" "MyPublicRouting" {
  vpc_id = aws_vpc.MyVPC04.id
  tags = {
    Name = "MyPublicRouting"
  }
}

resource "aws_route_table_association" "MyPublicSubnetRoutingAssociation" {
  subnet_id      = aws_subnet.MyPublicSubnet.id
  route_table_id = aws_route_table.MyPublicRouting.id
}

resource "aws_route" "default_route" {
  route_table_id            = aws_route_table.MyPublicRouting.id
  destination_cidr_block    = "0.0.0.0/0"
  gateway_id = aws_internet_gateway.MyIGW.id
}

resource "aws_instance" "MyWeb" {
  ami = "ami-097bf0ec147165215"
  instance_type = "t3.micro"
  key_name = aws_key_pair.tf_keypair.key_name
  vpc_security_group_ids = [aws_security_group.MyPublicSecugroup.id]
  user_data = <<-EOF
              #!/bin/bash
              hostnamectl --static set-hostname MyWeb
              echo "too1234." | passwd --stdin root
              sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
              sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
              systemctl restart sshd
              yum install -y httpd
              systemctl enable --now httpd
              echo "<h1>MyWeb test web page</h1>" > /var/www/html/index.html
              EOF

  user_data_replace_on_change = true
  tags = {
    Name = "MyWeb"
  }
}

resource "aws_security_group" "MyPublicSecugroup" {
  name = "MyPublicSecugroup"
  description = "Permit HTTP(80) and SSH(22)"
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port       = 0
    to_port         = 0
    protocol        = "-1"
    cidr_blocks     = ["0.0.0.0/0"]
  }
}
