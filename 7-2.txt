Parameters:
  KeyName:
    Description: EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: EC2 KeyPair
  LatestAmiId:
    Description: EC2 AMI 
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    AllowedValues:
      - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  MyVPC05:
    Type: AWS::EC2::VPC
    Properties:
     CidrBlock: 10.0.0.0/16
     Tags:
        - Key: Name
          Value: MyVPC05

  MyIGW1:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyIGW1

  MyIGW1attachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyIGW1
      VpcId: !Ref MyVPC05

  MyPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC05
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: MyPublicSubnet1

  MyPublicRouting1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC05
      Tags:
        - Key: Name
          Value: MyPublicRouting1

  MyPublicDefault1:
    Type: AWS::EC2::Route
    DependsOn: MyIGW1attachment
    Properties:
      RouteTableId: !Ref MyPublicRouting1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIGW1

  MyPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPublicRouting1
      SubnetId: !Ref MyPublicSubnet1

  MyWeb1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: MyWeb1
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref MyPublicSubnet1
          GroupSet:
          - !Ref MyPublicSecugroup1
          AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostnamectl --static set-hostname MyWeb1
            yum install httpd -y
            systemctl enable --now httpd
            echo "<h1>MyWeb1 test web page</h1>" > /var/www/html/index.html

  MyPublicSecugroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permit HTTP(80) and SSH(22)
      VpcId: !Ref MyVPC05
      GroupName: MyPublicSecugroup1
      Tags:
        - Key: Name
          Value: MyPublicSecugroup1
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

  MyVPC06:
    Type: AWS::EC2::VPC
    Properties:
     CidrBlock: 20.0.0.0/16
     Tags:
        - Key: Name
          Value: MyVPC06

  MyIGW2:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyIGW2

  MyIGW2attachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyIGW2
      VpcId: !Ref MyVPC06

  MyPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC06
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 20.0.0.0/24
      Tags:
        - Key: Name
          Value: MyPublicSubnet2

  MyPublicRouting2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC06
      Tags:
        - Key: Name
          Value: MyPublicRouting2

  MyPublicDefault2:
    Type: AWS::EC2::Route
    DependsOn: MyIGW2attachment
    Properties:
      RouteTableId: !Ref MyPublicRouting2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIGW2

  MyPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyPublicRouting2
      SubnetId: !Ref MyPublicSubnet2

  MyWeb2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: MyWeb2
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref MyPublicSubnet2
          GroupSet:
          - !Ref MyPublicSecugroup2
          AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostnamectl --static set-hostname MyWeb2
            echo "toor1234." | passwd --stdin root
            sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
            sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
            systemctl restart sshd
            yum install -y httpd
            systemctl enable --now httpd
            echo "<html><h1>MyWeb2 test page</h1></html>" > /var/www/html/index.html

  MyWeb3:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: MyWeb3
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref MyPublicSubnet2
          GroupSet:
          - !Ref MyPublicSecugroup2
          AssociatePublicIpAddress: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            hostnamectl --static set-hostname MyWeb3
            echo "too1234." | passwd --stdin root
            sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
            sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
            systemctl restart sshd
            yum install -y httpd
            systemctl enable --now httpd
            echo "<html><h1>MyWeb3 test page</h1></html>" > /var/www/html/index.html

  MyPublicSecugroup2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permit HTTP(80) and SSH(25)
      VpcId: !Ref MyVPC06
      GroupName: MyPublicSecugroup2
      Tags:
        - Key: Name
          Value: MyPublicSecugroup2
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

  MyNLBtargetgroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyNLBtargetgroup
      Port: 80
      Protocol: TCP
      VpcId: !Ref MyVPC06
      Targets:
        - Id: !Ref MyWeb2
          Port: 80
        - Id: !Ref MyWeb3
          Port: 80

  MyNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: internet-facing
      Subnets:
        - !Ref MyPublicSubnet2
      Tags:
        - Key: Name
          Value: MyNLB

  MyNLBlistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyNLBtargetgroup
      LoadBalancerArn: !Ref MyNLB
      Port: 80
      Protocol: TCP